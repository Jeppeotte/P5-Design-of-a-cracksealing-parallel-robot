<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Homing" Id="{006b150a-2f76-4d54-8c38-0719680ad67e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Homing
VAR_INPUT	
END_VAR

VAR_OUTPUT
	bStartConfigurationComplete						: BOOL ;
END_VAR

VAR
// Counter, timer and state for CASE shifts:
	iHomingCounter								: INT;
	iVelocityCounter							: INT;
	nStateHoming								: INT;
	tTimer										: REAL;
	Step45Done									: BOOL;
	Step75Done									: BOOL;
	
// Coeffcients for calculating angle ang angular velocity for left motor:
	a0Left										: LREAL;
	a1Left										: LREAL;
	a2Left										: LREAL;
	a3Left										: LREAL;
	
// Coeffcients for calculating angle ang angular velocity for right motor:
	a0Right										: LREAL;
	a1Right										: LREAL;
	a2Right										: LREAL;
	a3Right										: LREAL;
	
// Converting variables:
	nRadianToPulse								: LREAL;
	nRadToRPM									: LREAL;
	nRPMToVolt									: LREAL;
	
// Calculation help:
	nNumberOfVolts								: LREAL :=10;
	nMaxRPM										: LREAL :=12000;
	nMaxPositiveINT								: LREAL :=32767;
	nVoltsInINT									: LREAL;
	n1VoltToINT									: LREAL;
	n180Degrees									: LREAL := 180;
	
// Angle and angular velocity for theta 1
	nTheta1HomingToStartConfig					: LREAL;
	nThetaDot1HomingToStartConfig				: LREAL;
	
// Angle and angular velocity for theta 2:
	nTheta2HomingToStartConfig					: LREAL;
	nThetaDot2HomingToStartConfig				: LREAL;
	
// Arrays with angles and volts for theta 1:
	aPulseFromHomingToStartConfigLeft				: ARRAY[0..NUMBER_OF_RUNS] OF LREAL;
	aPulseDiffFromHomingToStartConfigLeft			: ARRAY[0..NUMBER_OF_RUNS] OF INT;
	aThetaDot1RadianPerSecToVoltINT_Homing		: ARRAY[0..NUMBER_OF_RUNS] OF INT;

// Arrays with angles and volts for theta 2:
	aPulseFromHomingToStartConfigRight				: ARRAY[0..NUMBER_OF_RUNS] OF LREAL;
	aPulseDiffFromHomingToStartConfigRight			: ARRAY[0..NUMBER_OF_RUNS] OF INT;
	aThetaDot2RadianPerSecToVoltINT_Homing		: ARRAY[0..NUMBER_OF_RUNS] OF INT;

// Saving values
	nVelocityToVoltLeft: INT;
	nVelocityToVoltRight: INT;
	nPulseDiffFromHomingToStartConfigLeft : INT;
	nPulseDiffFromHomingToStartConfigRight: INT;
	
END_VAR

VAR CONSTANT
	NUMBER_OF_RUNS								: INT := 50;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Homing has been given 5 secondes to take place, this is for each of the motors *)

// Rad to pulse convertation:
	nRadianToPulse		:= (pi*2)/(500*43);
	
// Calculating a-values for left mortor:
	a0Left := GVL_Data.nHomingAngleLeft ;
	a1Left := 0 ;
	a2Left := 3/(EXPT(5,2))*(GVL_Data.nStartAngleOfCrack1 - a0Left) ;
	a3Left := -2/(EXPT(5,3))*(GVL_Data.nStartAngleOfCrack1 - a0Left) ;
	
// Calculating a-values for right mortor:
	a0Right := GVL_Data.nHomingAngleRight ;
	a1Right := 0 ;
	a2Right := 3/(EXPT(5,2))*(GVL_Data.nStartAngleOfCrack2 - a0Right) ;
	a3Right := -2/(EXPT(5,3))*(GVL_Data.nStartAngleOfCrack2 - a0Right) ;
	
// Calculating Variables:
	nRadToRPM				:= (60*43)/(2*pi);
	nRPMToVolt				:= nNumberOfVolts/nMaxRPM ;
	nVoltsInINT				:= nNumberOfVolts/nMaxPositiveINT;
	n1VoltToINT				:= (1/(nVoltsInINT));

FOR iVelocityCounter	:= 0 TO NUMBER_OF_RUNS-1 BY 1 DO
	tTimer		:= 0.1 * iVelocityCounter ;
		// Left motor:
	nTheta1HomingToStartConfig 		:= a0Left + (a1Left*tTimer) + (a2Left * EXPT(tTimer,2)) + (a3Left * EXPT(tTimer,3)) ;	
	nThetaDot1HomingToStartConfig 	:= a1Left + (2 * a2Left *tTimer) + (3 * a3Left * EXPT(tTimer,2)) ;
		// Right motor:
	nTheta2HomingToStartConfig 		:= a0Right + (a1Right*tTimer) + (a2Right * EXPT(tTimer,2)) + (a3Right * EXPT(tTimer,3)) ;	
	nThetaDot2HomingToStartConfig 	:= a1Right + (2 * a2Right *tTimer) + (3 * a3Right * EXPT(tTimer,2)) ;
	
	//Arrays for saving data:
		// Left motor:
	aPulseFromHomingToStartConfigLeft[iVelocityCounter] 			:= LREAL_TO_INT(nTheta1HomingToStartConfig / nRadianToPulse) ;
	aPulseDiffFromHomingToStartConfigLeft[iVelocityCounter] 		:= LREAL_TO_INT(aPulseFromHomingToStartConfigLeft[iVelocityCounter+1]-aPulseFromHomingToStartConfigLeft[iVelocityCounter]);
	aThetaDot1RadianPerSecToVoltINT_Homing[iVelocityCounter]	:= ABS(LREAL_TO_INT((nThetaDot1HomingToStartConfig * (nRadToRPM) * (nRPMToVolt) * (n1VoltToINT)))) ;
		
		// Right motor:
	aPulseFromHomingToStartConfigRight[iVelocityCounter] 			:= LREAL_TO_INT(nTheta2HomingToStartConfig / nRadianToPulse) ;
	aPulseDiffFromHomingToStartConfigRight[iVelocityCounter]		:= LREAL_TO_INT(aPulseFromHomingToStartConfigRight[iVelocityCounter+1]-aPulseFromHomingToStartConfigRight[iVelocityCounter]);
	aThetaDot2RadianPerSecToVoltINT_Homing[iVelocityCounter]	:= ABS(LREAL_TO_INT((nThetaDot2HomingToStartConfig * (nRadToRPM) * (nRPMToVolt) * (n1VoltToINT)))) ;
END_FOR	

//-------------------------------------------Homing sequence----------------------------------------------------------------------

CASE nStateHoming OF
0: //-----------------------------------------Initiating homing--------------------------------------------------------------------
	bStartConfigurationComplete 	:= FALSE;
	nStateHoming 					:= 10;

10 : //---------------------------------------Turning on PLC------------------------------------------------------------------------
	
	IF GVL_IO.bStartPLC THEN 
		nStateHoming := 20;
	END_IF

20 : //---------------------------------------Motors running to hit homebotton left------------------------------------------------
	
	//Left motor:
		GVL_IO.bMotorDriverOutputDigitalLeftCCW 		:= TRUE;
		GVL_IO.bMotorDriverOutputDigitalLeftCW 			:= FALSE;
		GVL_IO.iMotorDriverOutputAnalogLeft 			:= 3277;
	
	//Right motor:
		GVL_IO.bMotorDriverOutputDigitalRightCCW 		:= TRUE;
		GVL_IO.bMotorDriverOutputDigitalRightCW 		:= FALSE;
		GVL_IO.iMotorDriverOutputAnalogRight 			:= 1639;    //Running slower for safety
	
	IF GVL_IO.bHomingLeft THEN
		nStateHoming := 30;
	END_IF

30 : //----------------------------------------------Resetting encoder left-----------------------------------------------------------
	GVL_Data.iEncoderRotationCounterLeft := (GVL_Data.iEncoderRotationCounterLeft * 0 + GVL_Data.nHomingAngleInPulseLeft);
	
	IF (GVL_Data.iEncoderRotationCounterLeft = GVL_Data.nHomingAngleInPulseLeft) THEN
		nStateHoming := 40;
	END_IF
	
40 : //--------------------------------------------------Left motor to start configuration----------------------------------------

	//Making a counter depend on the following half step in case:
		IF Step45Done THEN
			iHomingCounter 	:= iHomingCounter + 1;
			Step45Done		:= FALSE;
		END_IF

	//Saving motor values for the left motor, for use in the next case:
		nVelocityToVoltLeft 					:= aThetaDot1RadianPerSecToVoltINT_Homing[iHomingCounter+1];
		nPulseDiffFromHomingToStartConfigLeft	:= aPulseDiffFromHomingToStartConfigLeft[iHomingCounter];

	//Making a half step, to wait for the motors to be in the right position:
		nStateHoming := 45;

45 : //------------------------------Half case step (waiting for motors go to desired position)------------------------------------

	IF NOT (GVL_Data.iEncoderRotationCounterLeft = GVL_Data.iEncoderRotationCounterLeft + (nPulseDiffFromHomingToStartConfigLeft)) THEN
		
		//Both motors running with same speed and pulse count, to have a smooth motion:
		IF (nPulseDiffFromHomingToStartConfigLeft < 0) THEN
			//Left motor
			GVL_IO.bMotorDriverOutputDigitalLeftCCW		:= FALSE;
			GVL_IO.bMotorDriverOutputDigitalLeftCW		:= TRUE;
			GVL_IO.iMotorDriverOutputAnalogLeft			:= nVelocityToVoltLeft;
			
			//Right motor
			GVL_IO.bMotorDriverOutputDigitalRightCCW	:= FALSE;
			GVL_IO.bMotorDriverOutputDigitalRightCW		:= TRUE;
			GVL_IO.iMotorDriverOutputAnalogRight		:= nVelocityToVoltLeft;
			
		ELSIF (nPulseDiffFromHomingToStartConfigLeft > 0) THEN
			//Left motor
			GVL_IO.bMotorDriverOutputDigitalLeftCCW		:= TRUE;
			GVL_IO.bMotorDriverOutputDigitalLeftCW		:= FALSE;
			GVL_IO.iMotorDriverOutputAnalogLeft			:= nVelocityToVoltLeft;
			
			//Right motor
			GVL_IO.bMotorDriverOutputDigitalRightCCW	:= TRUE;
			GVL_IO.bMotorDriverOutputDigitalRightCW		:= FALSE;
			GVL_IO.iMotorDriverOutputAnalogRight		:= nVelocityToVoltLeft;
		END_IF		
		
	// Going back to state 40 to get motors to go to the next desired position:
	ELSIF (GVL_Data.iEncoderRotationCounterLeft = GVL_Data.iEncoderRotationCounterLeft + (nPulseDiffFromHomingToStartConfigLeft)) THEN
		Step45Done := TRUE;	
		nStateHoming := 40;
	END_IF
	
	//Shifting state when motor left has achived start configuration
	IF (GVL_Data.iEncoderRotationCounterLeft = GVL_Data.nStartConfigInPulseLeft) THEN
		nStateHoming := 50;
	END_IF

50 : //------------------------------------------Motor right running to hit homebotton right--------------------------------------
	
	//Left motor:
		GVL_IO.bMotorDriverOutputDigitalLeftCCW := FALSE;
		GVL_IO.bMotorDriverOutputDigitalLeftCW := FALSE;
		GVL_IO.iMotorDriverOutputAnalogLeft := 0;					//Not running to hold startconfig position:
		
	//Right motor:
		GVL_IO.bMotorDriverOutputDigitalRightCCW := FALSE;
		GVL_IO.bMotorDriverOutputDigitalRightCW := TRUE;
		GVL_IO.iMotorDriverOutputAnalogRight := 3277;
	
	IF GVL_IO.bHomingRight THEN
		nStateHoming := 60;
	END_IF

60 : //------------------------------------------------Resetting encoder right------------------------------------------------------
	
	GVL_Data.iEncoderRotationCounterRight := (GVL_Data.iEncoderRotationCounterRight * 0 + GVL_Data.nHomingAngleInPulseRight);
	
	nStateHoming := 70;
	
70 : //----------------------------------------------------Left motor to start configuration--------------------------------------

	//Making a counter depend on the following half step in case:
		IF Step75Done THEN
			iHomingCounter 	:= iHomingCounter + 1;
			Step75Done		:= FALSE;
		END_IF

	//Saving motor values for the right motor, for use in the next case:
		nVelocityToVoltRight 					:= aThetaDot2RadianPerSecToVoltINT_Homing[iHomingCounter];
		nPulseDiffFromHomingToStartConfigRight	:= aPulseDiffFromHomingToStartConfigRight[iHomingCounter];

	//Making a half step, to wait for the motors to be in the right position:
		nStateHoming := 75;

75: //------------------------------Half case step (waiting for the right motor go to desired position)------------------------------------

	IF NOT (GVL_Data.iEncoderRotationCounterRight = GVL_Data.iEncoderRotationCounterRight + (nPulseDiffFromHomingToStartConfigRight)) THEN
		//Making sure motor left does not run:
			GVL_IO.bMotorDriverOutputDigitalLeftCCW 	:= FALSE;
			GVL_IO.bMotorDriverOutputDigitalLeftCW 		:= FALSE;
			GVL_IO.iMotorDriverOutputAnalogLeft 		:= 0;	
	
		//Right motor running:
		IF (nPulseDiffFromHomingToStartConfigRight < 0) THEN		
			GVL_IO.bMotorDriverOutputDigitalRightCCW	:= FALSE;
			GVL_IO.bMotorDriverOutputDigitalRightCW		:= TRUE;
			GVL_IO.iMotorDriverOutputAnalogRight		:= nVelocityToVoltRight;
			
		ELSIF (nPulseDiffFromHomingToStartConfigRight > 0) THEN
			GVL_IO.bMotorDriverOutputDigitalRightCCW	:= TRUE;
			GVL_IO.bMotorDriverOutputDigitalRightCW		:= FALSE;
			GVL_IO.iMotorDriverOutputAnalogRight		:= nVelocityToVoltRight;
		END_IF		
		
	// Going back to state 70 to get motors to go to the next desired position:
	ELSIF (GVL_Data.iEncoderRotationCounterRight = GVL_Data.iEncoderRotationCounterRight + (nPulseDiffFromHomingToStartConfigRight)) THEN
		Step75Done := TRUE;	
		nStateHoming := 70;
	END_IF
	
	IF (GVL_Data.iEncoderRotationCounterRight = GVL_Data.nStartConfigInPulseRight) THEN
		nStateHoming := 80;
	END_IF

80 : //----------------------------------------Done homing--------------------------------------------------------------------------
	bStartConfigurationComplete := TRUE;
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_Homing">
      <LineId Id="3410" Count="203" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>