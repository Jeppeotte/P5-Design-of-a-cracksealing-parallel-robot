<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_StartConfigToCrack" Id="{7d345950-b3f6-44bc-a9f6-3c580cadcf67}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StartConfigToCrack
VAR_INPUT
	//Variables for the polynomial for the left motor:
	a0Left 						: LREAL ;
	a1Left 						: LREAL ;
	a2Left 						: LREAL ;
	a3Left 						: LREAL ;
	
	//Variables for the polynomail for the left motor:
	a0Right 					: LREAL ;
	a1Right						: LREAL ;
	a2Right						: LREAL ;
	a3Right 					: LREAL ;	
END_VAR

VAR_OUTPUT
	bMoveFromStartConfigToCrackDone		: BOOL;
END_VAR

VAR
//Timer, counters and states for CASE shifts: 
	tTimer 								: LREAL;
	iVelocityCounter					: INT;
	nStateStartConfigToCrack			: INT;
	iStartConfigTimeCounter				: CTU;
	
//Angle and angular velocity for theta 1 (left motor):
	nTheta1StartConfigToCrack			:LREAL;
	nThetaDot1StartConfigToCrack		:LREAL;
	nVelocityForStartConfigToCrackLeft	:INT;
	nPulseDiffFromStartConfigToCrackLeft:INT;
	
//Arrays for saving angle and angular velocity for theta 1 (left motor):
	aPulseFromStartConfigToCrack1		:ARRAY [0..NUMBER_OF_RUNS_I] OF INT;
	aPulseDiffFromStartConfigToCrack1	:ARRAY [0..NUMBER_OF_RUNS_I] OF INT;
	aThetaDot1RadianPerSecToVoltINT_STC :ARRAY [0..NUMBER_OF_RUNS_I] OF INT;

//Angle and angular velocity for theta 2 (right motor):
	nTheta2StartConfigToCrack				:LREAL;
	nThetaDot2StartConfigToCrack			:LREAL;
	nPulseDiffFromStartConfigToCrackRight	: INT;
	nVelocityForStartConfigToCrackRight		: INT;

//Arrays for saving angle and angular velocity for theta 2 (right motor):
	aPulseFromStartConfigToCrack2			:ARRAY [0..NUMBER_OF_RUNS_I] OF INT;
	aPulseDiffFromStartConfigToCrack2 		:ARRAY [0..NUMBER_OF_RUNS_I] OF INT;
	aThetaDot2RadianPerSecToVoltINT_STC 	:ARRAY [0..NUMBER_OF_RUNS_I] OF INT;

//Conversion variables:
	RadianToPulse 							: LREAL;
	nRadToRPM								: LREAL;
	nRPMToVolt								: LREAL;
	nVoltsInINT								: LREAL;
	n1VoltToINT								: LREAL;
	
//Calculation help;	
	nNumberOfVolts							: LREAL :=10;
	nMaxRPM									: LREAL :=12000;
	nMaxPositiveINT							: LREAL :=32767;
	
//Timer, timer input and time increments:
	bStartTimer								: BOOL;
	tStartConfigIncrements					: TIME;
	tStartConfigTimer						: TON;
END_VAR

VAR CONSTANT
	//Number of runs the loop has to continue
	NUMBER_OF_RUNS_I : INT := 11 ;
	
	//Counter max value:
	NUMBER_OF_RUNS_W : WORD := 11 ;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Rad to pulse conversion:
	RadianToPulse		:= (pi*2)/(500*43);
	
// Calculating a-values for left mortor:
	a0Left := GVL_Data.nStartConfigAngleLeft;								//Start angle theta0 for left motor
	a1Left := 0;
	a2Left := (3/(EXPT(1,2)))*(GVL_Data.nStartAngleOfCrack1 - a0Left);
	a3Left := (-2/(EXPT(1,3)))*(GVL_Data.nStartAngleOfCrack1 - a0Left);
	
// Calculating a-values for right mortor:
	a0Right := GVL_Data.nStartConfigAngleRight;								//Start angle theta0 for right motor
	a1Right := 0;
	a2Right := (3/(EXPT(1,2)))*(GVL_Data.nStartAngleOfCrack2 - a0Right);
	a3Right := (-2/(EXPT(1,3)))*(GVL_Data.nStartAngleOfCrack2 - a0Right);

// Conversion variables:
	nRadToRPM				:= (60*43)/(2*pi);
	nRPMToVolt				:= nNumberOfVolts/nMaxRPM ;
	nVoltsInINT				:= nNumberOfVolts/nMaxPositiveINT;
	n1VoltToINT				:= (1/(nVoltsInINT));

//---------------------------------Calculating angles and angular velocity------------------------------------------------------------
FOR iVelocityCounter := 0 TO NUMBER_OF_RUNS_I-1 BY 1 DO
		//Timer for discretization:
		tTimer		:= 0.1 * iVelocityCounter;
			
		// Left motor:
		nTheta1StartConfigToCrack 		:= a0Left + (a1Left*tTimer) + (a2Left * EXPT(tTimer,2)) + (a3Left * EXPT(tTimer,3)) ;	
		nThetaDot1StartConfigToCrack 	:= a1Left + (2 * a2Left *tTimer) + (3 * a3Left * EXPT(tTimer,2)) ;
			
		// Right motor:
		nTheta2StartConfigToCrack 		:= a0Right + (a1Right*tTimer) + (a2Right * EXPT(tTimer,2)) + (a3Right * EXPT(tTimer,3)) ;	
		nThetaDot2StartConfigToCrack 	:= a1Right + (2 * a2Right *tTimer) + (3 * a3Right * EXPT(tTimer,2)) ;
		
		//Arrays for saving data:
		// Left motor:
		aPulseFromStartConfigToCrack1[iVelocityCounter] 		:= LREAL_TO_INT(nTheta1StartConfigToCrack / RadianToPulse) ;
		aPulseDiffFromStartConfigToCrack1[iVelocityCounter] 	:= LREAL_TO_INT(aPulseFromStartConfigToCrack1[iVelocityCounter+1]-aPulseFromStartConfigToCrack1[iVelocityCounter]);
		aThetaDot1RadianPerSecToVoltINT_STC[iVelocityCounter]	:= ABS(LREAL_TO_INT((nThetaDot1StartConfigToCrack * (nRadToRPM) * (nRPMToVolt) * (n1VoltToINT)))) ;
		aPulseDiffFromStartConfigToCrack1[NUMBER_OF_RUNS_I-1]		:= 0;

		// Right motor:
		aPulseFromStartConfigToCrack2[iVelocityCounter] 		:= LREAL_TO_INT(nTheta2StartConfigToCrack / RadianToPulse) ;
		aPulseDiffFromStartConfigToCrack2[iVelocityCounter] 	:= LREAL_TO_INT(aPulseFromStartConfigToCrack2[iVelocityCounter+1]-aPulseFromStartConfigToCrack2[iVelocityCounter]);
		aThetaDot2RadianPerSecToVoltINT_STC[iVelocityCounter]	:= ABS(LREAL_TO_INT((nThetaDot2StartConfigToCrack * (nRadToRPM) * (nRPMToVolt) * (n1VoltToINT))));
		aPulseDiffFromStartConfigToCrack2[NUMBER_OF_RUNS_I-1]		:= 0;
	END_FOR	

	
CASE nStateStartConfigToCrack OF
0: //-------------------------------------------Initiating movement fra start configuration to crack------------------------------

	bMoveFromStartConfigToCrackDone := FALSE;

	IF MAIN.bDoneHoming THEN
		nStateStartConfigToCrack := 10;
	END_IF
	
5:
//Left motor
	GVL_IO.iMotorDriverOutputAnalogLeft := 0;
	GVL_IO.bMotorDriverOutputDigitalLeftCCW := FALSE;
	GVL_IO.bMotorDriverOutputDigitalLeftCW := FALSE;
	
//Right motor
	GVL_IO.iMotorDriverOutputAnalogRight := 0;
	GVL_IO.bMotorDriverOutputDigitalRightCCW := FALSE;
	GVL_IO.bMotorDriverOutputDigitalRightCW := FALSE;
	
	IF GVL_IO.bStartPLC THEN
		nStateStartConfigToCrack := 10;
	END_IF

10:
//Initianting timer on-delay:
	bStartTimer 					:= TRUE;
	tStartConfigIncrements 			:= T#100MS;
	tStartConfigTimer				(IN := bStartTimer AND NOT tStartConfigTimer.Q, PT := tStartConfigIncrements);
	iStartConfigTimeCounter			(CU := tStartConfigTimer.Q, PV := NUMBER_OF_RUNS_W);	

//Saving angle and velocity in volt for next case step:
	//Left motor:
	nPulseDiffFromStartConfigToCrackLeft 	:= aPulseDiffFromStartConfigToCrack1[iStartConfigTimeCounter.CV];
	nVelocityForStartConfigToCrackLeft 		:= aThetaDot1RadianPerSecToVoltINT_STC[iStartConfigTimeCounter.CV];
	
	//Right motor:
	nPulseDiffFromStartConfigToCrackRight 	:= aPulseDiffFromStartConfigToCrack2[iStartConfigTimeCounter.CV];
	nVelocityForStartConfigToCrackRight 	:= aThetaDot2RadianPerSecToVoltINT_STC[iStartConfigTimeCounter.CV];

//Running both motors
IF NOT tStartConfigTimer.Q THEN
	IF (nPulseDiffFromStartConfigToCrackLeft < 0) THEN //Checking if the motors should go CW:
		GVL_IO.bMotorDriverOutputDigitalLeftCCW		:= FALSE;
		GVL_IO.bMotorDriverOutputDigitalLeftCW		:= TRUE;
		GVL_IO.iMotorDriverOutputAnalogLeft			:= nVelocityForStartConfigToCrackLeft;
					
	ELSIF (nPulseDiffFromStartConfigToCrackLeft > 0) THEN //Checking if the motors should go CCW:
		GVL_IO.bMotorDriverOutputDigitalLeftCCW		:= TRUE;
		GVL_IO.bMotorDriverOutputDigitalLeftCW		:= FALSE;
		GVL_IO.iMotorDriverOutputAnalogLeft			:= nVelocityForStartConfigToCrackLeft;
	END_IF
		
	IF (nPulseDiffFromStartConfigToCrackRight < 0) THEN //Checking if the motors should go CW:
		GVL_IO.bMotorDriverOutputDigitalRightCCW		:= FALSE;
		GVL_IO.bMotorDriverOutputDigitalRightCW			:= TRUE;
		GVL_IO.iMotorDriverOutputAnalogRight			:= nVelocityForStartConfigToCrackRight;
						
	ELSIF (nPulseDiffFromStartConfigToCrackRight > 0) THEN //Checking if the motors should go CCW:
		GVL_IO.bMotorDriverOutputDigitalRightCCW		:= TRUE;
		GVL_IO.bMotorDriverOutputDigitalRightCW			:= FALSE;
		GVL_IO.iMotorDriverOutputAnalogRight			:= nVelocityForStartConfigToCrackRight;
	END_IF
END_IF

//Shifting state after crack is reach:
IF iStartConfigTimeCounter.Q THEN
	nStateStartConfigToCrack := 20;	 		// Initiating done moving from start confiuration to crack.
END_IF

20:
//Left motor:
	GVL_IO.iMotorDriverOutputAnalogLeft := 0;
	GVL_IO.bMotorDriverOutputDigitalLeftCCW := FALSE;
	GVL_IO.bMotorDriverOutputDigitalLeftCW := FALSE;
	
//Right motor:
	GVL_IO.iMotorDriverOutputAnalogRight := 0;
	GVL_IO.bMotorDriverOutputDigitalRightCCW := FALSE;
	GVL_IO.bMotorDriverOutputDigitalRightCW := FALSE;


// Saying that the movement of the robot from start configuration to crack start is done:
	bMoveFromStartConfigToCrackDone := TRUE;
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_StartConfigToCrack">
      <LineId Id="889" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="894" Count="3" />
      <LineId Id="893" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="898" Count="3" />
      <LineId Id="891" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="1250" Count="2" />
      <LineId Id="872" Count="0" />
      <LineId Id="932" Count="0" />
      <LineId Id="906" Count="0" />
      <LineId Id="908" Count="23" />
      <LineId Id="907" Count="0" />
      <LineId Id="1490" Count="0" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1492" Count="6" />
      <LineId Id="1491" Count="0" />
      <LineId Id="1502" Count="1" />
      <LineId Id="1672" Count="0" />
      <LineId Id="1591" Count="0" />
      <LineId Id="1675" Count="0" />
      <LineId Id="1673" Count="0" />
      <LineId Id="1676" Count="0" />
      <LineId Id="1674" Count="0" />
      <LineId Id="1592" Count="0" />
      <LineId Id="1595" Count="0" />
      <LineId Id="1509" Count="0" />
      <LineId Id="1596" Count="0" />
      <LineId Id="1504" Count="2" />
      <LineId Id="1500" Count="0" />
      <LineId Id="1499" Count="0" />
      <LineId Id="1421" Count="3" />
      <LineId Id="873" Count="0" />
      <LineId Id="1411" Count="0" />
      <LineId Id="1414" Count="6" />
      <LineId Id="1408" Count="0" />
      <LineId Id="1677" Count="0" />
      <LineId Id="1460" Count="22" />
      <LineId Id="1486" Count="0" />
      <LineId Id="1678" Count="0" />
      <LineId Id="1487" Count="2" />
      <LineId Id="1425" Count="1" />
      <LineId Id="1412" Count="0" />
      <LineId Id="1680" Count="0" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1691" Count="0" />
      <LineId Id="1693" Count="0" />
      <LineId Id="1692" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1685" Count="0" />
      <LineId Id="1688" Count="0" />
      <LineId Id="1683" Count="0" />
      <LineId Id="1681" Count="1" />
      <LineId Id="1501" Count="0" />
      <LineId Id="1679" Count="0" />
      <LineId Id="934" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>